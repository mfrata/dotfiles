#!/bin/bash

set -x


update-upgrade() {
  sudo apt update && sudo apt upgrade -y
}


install-apt() {
  sudo apt install -qq --no-install-recommends -f --yes $1
}


install-pip() {
  sudo pip3 install $1
}


install-dpkg() {
  sudo dpkg -i $1 || install-apt
  rm $1
}


install-tar() {
  [ $2 ] && location=$2 || location=/usr/local
  sudo tar -C $location --strip-components 1 -xf $1
  rm $1
}


install-appimage() {
  chmod +x $1
  ./$1 --appimage-extract usr
  sudo cp -r squashfs-root/usr/* /usr/local/
  rm $1 squashfs-root -r
}


curl-dl-content() {
  curl --fail --silent --show-error --location $@
}


curl-dl-file (){
  [ $2 ] && filename=$2 || filename=$(basename $1)
  curl-dl-content $1 --output $filename
}


install-sudosh() {
  sudo sh -c "$(curl-dl-content ${1})" $@
}


install-sh() {
  sh -c "$(curl-dl-content ${1})" $@
}


install-bin() {
  file=$1
  sudo install -o root -g root -m 0755 $file /usr/local/bin/$file
  rm $file
}


install-opt() {
  sudo tar -C /opt -xf $1
  rm $1
}


repo(){
  sudo add-apt-repository --yes $1
}


post-install-add() {
  post_install_script="/tmp/postinstall"
  if [ ! -f "$post_install_script" ]; then
    echo "#!/bin/bash" >> $post_install_script
    echo "echo 'Running post install'" >> $post_install_script
    chmod +x $post_install_script
  fi
  echo "$1" >> $post_install_script
}


prerequisites-install() {
  cd && update-upgrade

  install-apt curl # Dl files or scritps' content
  install-apt software-properties-common # add repos ppa
  install-apt make
  install-apt git
  install-apt wget # for external scripts
}


homedirs-install() {
  # dotfiles
  if [ ! -d ~/.dotfiles ]; then
    git clone https://github.com/mfrata/dotfiles.git .dotfiles
    make -C ~/.dotfiles install
  fi

  # company aliases
  if [ ! -f .work_aliases ]; then
    touch .work_aliases
  fi
}


javascript-install () {
  NODE_VERSION=v15.10.0
  curl-dl-file https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.xz
  install-tar node-$NODE_VERSION-linux-x64.tar.xz
}


python-install() {
  install-apt python3-pip
  install-apt python3-setuptools

  # Upgrade pip to the latest version
  pip3 install --upgrade pip

  install-pip pytest
  install-pip ipython
}


scala-install() {
  # TODO Sbt
  # TODO Scala lang
  echo
}


rust-install() {
  # Installing cargo
  install-sudosh https://sh.rustup.rs -y
}


devenv-install() {
  install-apt build-essential
  python-install
  scala-install
  rust-install
  javascript-install

  # Docker
  install-sh https://get.docker.com
  sudo usermod -aG docker $USER

  # Docker compose
  COMPOSE_VERSION=1.28.5
  curl-dl-file "https://github.com/docker/compose/releases/download/$COMPOSE_VERSION/docker-compose-Linux-x86_64" docker-compose
  install-bin docker-compose

  # Kubectl
  K8S_VERSION=$(curl-dl-content https://dl.k8s.io/release/stable.txt)
  curl-dl-file "https://dl.k8s.io/release/$K8S_VERSION/bin/linux/amd64/kubectl"
  install-bin kubectl

  # Google cloud
  GCP_VERSION=329.0.0
  curl-dl-file https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$GCP_VERSION-linux-x86_64.tar.gz
  install-opt google-cloud-sdk-$GCP_VERSION-linux-x86_64.tar.gz
  post-install-add "/opt/google-cloud-sdk/install.sh"
}


tools-install() {
  # Keybase - Share secrets safely
  curl-dl-file https://prerelease.keybase.io/keybase_amd64.deb
  install-dpkg keybase_amd64.deb
  post-install-add "run_keybase"

  # KeypassXC - otp
  install-apt keepassxc

  TELEGRAM_VERSION=2.6.1
  curl-dl-file https://updates.tdesktop.com/tlinux/tsetup.$TELEGRAM_VERSION.tar.xz
  install-opt tsetup.$TELEGRAM_VERSION.tar.xz
  post-install-add "/opt/Telegram/Telegram"

  # Libreoffice calc
  install-apt libreoffice-calc
}


media-install() {
  ### Audio ###

  # Audacity - Edit my songs!!!
  repo ppa:ubuntuhandbook1/audacity && install-apt audacity


  ### Video ###

  # mpv - Favorite video player
  repo ppa:mc3man/mpv-tests && install-apt mpv

  # ffmpeg - Video tools
  install-apt ffmpeg


  ### Image ###

  # Rawtherapee - Edit raw photos! Can use darktable also
  RAWTHERAPEE_VERSION=5.8
  curl-dl-file https://rawtherapee.com/shared/builds/linux/RawTherapee_$RAWTHERAPEE_VERSION.AppImage
  install-appimage RawTherapee_$RAWTHERAPEE_VERSION.AppImage

  # Image magick - handle images
  curl-dl-file https://download.imagemagick.org/ImageMagick/download/binaries/magick
  install-appimage magick

  # Exiftools - handle metadata information of pictures
  EXIFTOOL_VERSION=12.21
  curl-dl-file https://exiftool.org/Image-ExifTool-$EXIFTOOL_VERSION.tar.gz
  install-opt Image-ExifTool-$EXIFTOOL_VERSION.tar.gz
  cd /opt/Image-ExifTool-$EXIFTOOL_VERSION &&\
    sudo perl Makefile.PL &&\
    sudo make install

  # sxiv - simple image viewer
  install-apt sxiv
}


terminal-install() {
  # Neovim
  curl-dl-file https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz
  install-tar nvim-linux64.tar.gz

  # Zsh
  install-apt zsh
  chsh -s /usr/bin/zsh $USER

  # om-my-zsh
  install-sh https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh

  # Pure theme for zsh
  mkdir -p "$HOME/.zsh"
  git clone https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"

  # Tmux  Terminal multiplexer
  install-apt tmux

  # FZF  Fuzzy find (can't live without it)
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install

  # Utils
  install-apt xsel # Clipboard utilities
  install-apt htop # Monitor process on terminal
  install-apt tree # View dir struct
  install-apt jq # Query jsons
  install-pip trash-cli # Safe rm

  # A good terminal (I liked that you can remove the top bar)
  # TODO get newer version of allacritty
  ALACRITTY_VERSION=v0.4.3
  curl-dl-file https://github.com/alacritty/alacritty/releases/download/$ALACRITTY_VERSION/Alacritty-$ALACRITTY_VERSION-ubuntu_18_04_amd64.deb
  install-dpkg Alacritty-$ALACRITTY_VERSION-ubuntu_18_04_amd64.deb
  gsettings set org.gnome.desktop.default-applications.terminal exec 'alacritty'

  # Better grep
  RG_VERSION=12.1.1
  curl-dl-file https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION}/ripgrep_${RG_VERSION}_amd64.deb
  install-dpkg ripgrep_${RG_VERSION}_amd64.deb
}


all-install () {
  prerequisites-install
  homedirs-install
  devenv-install
  tools-install
  media-install
  others-install
  terminal-install
}

main() {
  if [ -z $1 ]; then
    echo "Usage: install all"
  else
    $1-install $@
    echo "Instalation Done! Run for manual post instalation run:"
    echo
    echo "  /tmp/postinstall"
  fi
}

main $@
