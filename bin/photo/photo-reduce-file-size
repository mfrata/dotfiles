#!/bin/bash

set -e

detect_file_type(){
  file $1 --mime-type -b | cut -d '/' -f 1
}

reduce_image(){
  # tested on jpg
  local filename=$1
  mogrify -resize 2400x3600\> -quality 80 -sampling-factor 4:2:0 $filename
}

exit_if_bitrate_is_less_than_60kbps(){
  if [[ ! -z ${PHOTO_IGNORE_BITRATE_VALIDATION} ]]; then
    return
  fi
  # Canon generates videos with 60kbps (full size video)
  # Videos with less than this had already their size reduced
  bitrate=$(ffmpeg -i $1 2>&1 |  grep bitrate | cut -d ' ' -f8)
  if [[ ! "$bitrate" -gt "60000" ]]; then
    echo "$1 already has file size reduced!"
    exit 0;
  fi
}

reduce_video(){
  local filename=$1
  exit_if_bitrate_is_less_than_60kbps "$filename"

  local copy_filename=${filename}.copy
  mv $filename $copy_filename

  # source https://unix.stackexchange.com/a/38380
  # other refs https://guide.encode.moe/encoding/codecs/x264.html
  # crf = 24 This provides a good balance between quality and filesize
  ffmpeg -n -loglevel error \
    -i $copy_filename \
    -vcodec libx264 \
      -crf 24 \
    $filename
  # For some reason h264 is losing the metadata
  photo-copy-metadata-from-file-to-another $copy_filename $filename
  rm $copy_filename
}

reduce_file_size() {
  local filetype=$(detect_file_type $1)
  case $filetype in
    "image") reduce_image $1;;
    "video") reduce_video $1;;
    *) echo "unhandled filetype $filetype";;
  esac
}

reduce_files_size_on_dir() {
  local dir=$1
  export -f reduce_file_size
  # Be carefull with the recursion here!!!
  ls $dir | xargs -I@ photo-reduce-file-size $dir/@
}

main() {
  if [ -d $1 ]
  then
    reduce_files_size_on_dir $@
  else
    reduce_file_size $@
  fi
}

main $@

